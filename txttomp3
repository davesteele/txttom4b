#!/usr/bin/python

from google.oauth2 import service_account
from contextlib import contextmanager
import datetime
import time
import os
import sys
from pydub import AudioSegment
import shutil
import tempfile


for entry in os.listdir('.'):
    if entry[-5:] == ".json":
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = entry


@contextmanager
def rate_limit(*runtimes):
    """Limit the minimum time a task will take"""

    minruntime = max(runtimes)
    start = datetime.datetime.now()

    yield None

    duration = datetime.datetime.now() - start
    sleeptime = minruntime - duration.total_seconds()

    if sleeptime > 0:
        time.sleep(sleeptime)


def synthesize_text(text):
    """Synthesizes speech from the input string of text."""
    from google.cloud import texttospeech
    client = texttospeech.TextToSpeechClient()

    input_text = texttospeech.types.SynthesisInput(text=text)

    # Note: the voice can also be specified by name.
    # Names of voices can be retrieved with client.list_voices().
#     voice = texttospeech.types.VoiceSelectionParams(
#         language_code='en-US',
#         ssml_gender=texttospeech.enums.SsmlVoiceGender.FEMALE)

    voice = texttospeech.types.VoiceSelectionParams(name="en-US-Wavenet-C",
        language_code='en-US',)

    audio_config = texttospeech.types.AudioConfig(
        audio_encoding=texttospeech.enums.AudioEncoding.MP3)

    response = client.synthesize_speech(input_text, voice, audio_config)

    return response.audio_content

#     # The response's audio_content is binary.
#     with open('output.mp3', 'wb') as out:
#         out.write(response.audio_content)
#         print('Audio content written to file "output.mp3"')

infile = sys.argv[1]
outfile = os.path.splitext(infile)[0] + ".mp3"

shutil.copyfile("null.mp3", outfile)

lines = []
for line in open(infile, 'r').read().split('\n'):
    tmpfl = tempfile.mktemp(suffix=".mp3")

    print "saving %s to %s" % (line, tmpfl)

    mp3data = synthesize_text(line)

    with open(tmpfl, 'wb') as fp:
        fp.write(mp3data)

    oldmp3 = AudioSegment.from_file(outfile)
    newmp3 = AudioSegment.from_file(tmpfl)

    allmp3 = oldmp3 + newmp3
    allmp3.export(outfile, format="mp3")

    os.remove(tmpfl)

# mp3data = synthesize_text(open(infile, 'r').read())
# 
# with open(outfile, "wb") as fp:
#     fp.write(mp3data)
